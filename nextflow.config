/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/demultiplex Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    help = "null"
    run_dir = "null"
    samplesheet_dir="${params.run_dir}/SampleSheet.csv"
    interop_dir="${params.run_dir}/InterOp"
    output_dir= "null"
    loading_threads="null"
    processing_threads="null"
    writing_threads="null"
    adapter_stringency="null"
    barcode_mismatches=1
    create_fastq_for_index_reads="null"
    ignore_missing_filter="null"
    ignore_missing_positions="null"
    minimum_trimmed_read_length="null"
    mask_short_adapter_reads="null"
    tiles="null"
    use_bases_mask="null"
    with_failed_reads="null"
    write_fastq_reverse_complement="null"
    no_bgzf_compression="null"
    fastq_compression_level="null"
    no_lane_splitting="null"
    find_adapters_with_sliding_window="null"
    reads= false
    nogroup = "--nogroup"
    noextract ="--noextract"
    compute_script= "/opt/interop/interop-1.2.4/bin/compute.sh"
    path_interop= "/opt/interop/interop-1.2.4/bin"
    command = ['plot_by_cycle','plot_by_lane','plot_flowcell','plot_qscore_heatmap','plot_qscore_histogram','plot_sample_qc']
    width = 100
    height = 100
    dpi = 300
    input_dir = "${params.output_dir}bcl2fastq/"
    multiqc_file = "${params.output_dir}multiqc/multiqc_data/multiqc_fastqc.txt"
    workdir = "${params.output_dir}/QC"
    script_parser = "/app/main.py"


    publish_dir_mode = 'copy'

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    // use docker in default standard profile
    standard {
        docker.enabled         = true
        docker.userEmulation   = true
        //docker.sudo 	       = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = false
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
// apptainer.registry   = 'quay.io'
// docker.registry      = 'quay.io'
// podman.registry      = 'quay.io'
// singularity.registry = 'quay.io'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
//    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.output_dir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.output_dir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.output_dir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.output_dir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/demultiplexing'
    author          = """Fujitsu"""
    homePage        = 'https://github.com/nf-core/demultiplexing'
    description     = """demultiplexing pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
